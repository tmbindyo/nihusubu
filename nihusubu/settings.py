"""
Django settings for nihusubu project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

import environ
import os
from pathlib import Path

env = environ.Env(
    # set casting, default value
    
)

SITE_ID = 1

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/



# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

PGCRYPTO_KEY = env.str("PGCRYPTO_KEY")

ALLOWED_HOSTS = env.list(
    "ALLOWED_HOSTS",
    default=[
        "localhost",
        "0.0.0.0",
        "127.0.0.1",
    ],
)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'constance',
    "constance.backends.database", 
    'guardian',
    'simple_history',
    # apps
    'authentication',
    'core',
    'dashboard',
    'financial_management',
    'notifications',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'nihusubu.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nihusubu.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env.str('DB_NAME', 'nihusubu'),
        'USER': env.str('DB_USER', 'postgres'),
        'PASSWORD': env.str('DB_PASSWORD', ''),
        'HOST': env.str('DB_HOST', '127.0.0.1'),
        'PORT': env.str('DB_PORT', '5432'),
    }
}

AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend", # Django GraphQL JWT
    "django.contrib.auth.backends.ModelBackend",
    "guardian.backends.ObjectPermissionBackend", # Django Guardian
]

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


## Django Constance
# Configure django-constance, a package used to manage application settings
# through the Django admin site

CONSTANCE_BACKEND = "constance.backends.database.DatabaseBackend"
# In cases where there are multiple databases, configure the one used by Constance.
# CONSTANCE_DBS = "default"

# Config values are in the format of:
# "key": (default_value, description, type (optional))
CONSTANCE_CONFIG = {
    "USE_AF": (False, "Use Africa's Talking as SMS gateway", bool),
    "USE_BONGA": (True, "Use Bonga SMS as SMS gateway", bool),
    'OUTGOING_BONGA_SMS_CLIENT_ID': ('391', 'Outgoing Bonga SMS Client ID'),
    'OUTGOING_BONGA_SMS_SERVICE_ID': ('1', 'Outgoing Bonga SMS Service ID'),
    'OUTGOING_BONGA_SMS_API_KEY': ('MLWlZ1KG7pXozpf', 'Outgoing Bonga SMS API Key'),
    'OUTGOING_BONGA_SMS_SECRET': ('XT0PcxiQK2bdIwZdQDEtgquqtfSnDV', 'Outgoing Bonga SMS Secret'),
    'OUTGOING_BONGA_SMS_URL': ('http://167.172.14.50:4002/v1/send-sms', 'Outgoing Bonga SMS URL'),
    'INCOMING_BONGA_SMS_CLIENT_ID': ('198', 'Incoming Bonga SMS Client ID'),
    'INCOMING_BONGA_SMS_SERVICE_ID': ('120', 'Incoming Bonga SMS Service ID'),
    'INCOMING_BONGA_SMS_API_KEY': ('KqlA8C7bZILSnju', 'Incoming Bonga SMS API Key'),
    'INCOMING_BONGA_SMS_SECRET': ('2JwwjGBebAzzr2UZVsg6aWzOzVGQow', 'Incoming Bonga SMS Secret'),
    'INCOMING_BONGA_SMS_URL': ('https://app.bongasms.co.ke/api/send-sms-v1', 'Incoming Bonga SMS URL'),
}

ACCOUNT_TYPE_CHOICES = (
    ('asset', 'Asset'),
    ('liability', 'Liability'),
    ('equity', 'Equity'),
    ('revenue', 'Revenue'),
    ('expense', 'Expense'),
)

TRANSACTION_TYPE_CHOICES = (
    ('purchase', 'Purchase'),
    ('sale', 'Sale'),
    ('transfer', 'Transfer'),
    ('deposit', 'Deposit'),
    ('withdrawal', 'Withdrawal'),
    ('expense', 'Expense'),
    ('income', 'Income'),
    # Add more choices as needed
)

JOURNAL_TYPES = [
        ('sales', 'Sales Journal'),
        ('purchase', 'Purchase Journal'),
        ('cash_receipts', 'Cash Receipts Journal'),
        ('cash_disbursements', 'Cash Disbursements Journal'),
        # Add more types as needed
    ]

TYPE_CHOICES = [
        ('balance_sheet', ("Balance Sheet")),
        ('income_statement', ("Income Statement")),
        ('cash_flow_statement', ("Cash Flow Statement")),
    ]


FINANCIAL_STATEMENT_TYPE_CHOICES = (
        ('balance_sheet', 'Balance Sheet'),
        ('income_statement', 'Income Statement'),
        ('cash_flow_statement', 'Cash Flow Statement'),
        # Add more choices as needed
    )

REPORT_TYPE_CHOICES = (
    ('balance_sheet', 'Balance Sheet'),
    ('income_statement', 'Income Statement'),
    ('cash_flow_statement', 'Cash Flow Statement'),
    ('financial_ratios', 'Financial Ratios'),
    # Add more choices as needed
)

RATIO_CATEGORY_CHOICES = [
    ('liquidity', 'Liquidity'),
    ('profitability', 'Profitability'),
    ('leverage', 'Leverage'),
    ('efficiency', 'Efficiency'),
    ('market_value', 'Market Value'),
    ('growth', 'Growth'),
    ('coverage', 'Coverage'),
    ('turnover', 'Turnover'),
    ('other', 'Other'),
]

RATIO_SOURCE_CHOICES = [
    ('financial_statements', 'Financial Statements'),
    ('industry_benchmarks', 'Industry Benchmarks'),
    ('external_sources', 'External Sources'),
    ('other', 'Other'),
]

RATIO_FREQUENCY_CHOICES = [
    ('quarterly', 'Quarterly'),
    ('annually', 'Annually'),
    ('monthly', 'Monthly'),
    ('other', 'Other'),
]


ANALYSIS_TYPE_CHOICES = (
    ('revenue', 'Revenue Trends'),
    ('expense', 'Expense Trends'),
    ('profit', 'Profit Trends'),
    ('cash_flow', 'Cash Flow Trends'),
    # Add more choices as needed
)




